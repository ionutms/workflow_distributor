name: Generate KiCad Documentation
on:
  push:
    branches: [ doc_workflow ]
  workflow_dispatch:

jobs:
  generate-kicad-outputs:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all history for proper branch management

      - name: Find KiCad project files
        id: find-files
        run: |
          # Find all KiCad project files in the repository
          PROJECT_FILE=$(find . -name "*.kicad_pro" | head -n 1)
          
          if [ -z "$PROJECT_FILE" ]; then
            echo "No KiCad project files found"
            echo "project_found=false" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          # Extract project directory and name
          PROJECT_DIR=$(dirname "$PROJECT_FILE")
          PROJECT_NAME=$(basename "$PROJECT_FILE" .kicad_pro)
          
          echo "PROJECT_FILE: $PROJECT_FILE"
          echo "PROJECT_DIR: $PROJECT_DIR"
          echo "PROJECT_NAME: $PROJECT_NAME"
          
          # Find matching schematic and PCB files
          SCHEMATIC_FILE=$(find "$PROJECT_DIR" -name "${PROJECT_NAME}.kicad_sch" | head -n 1)
          PCB_FILE=$(find "$PROJECT_DIR" -name "${PROJECT_NAME}.kicad_pcb" | head -n 1)
          
          # Output the results
          echo "project_file=$PROJECT_FILE" >> $GITHUB_OUTPUT
          echo "project_found=true" >> $GITHUB_OUTPUT
          echo "project_name=$PROJECT_NAME" >> $GITHUB_OUTPUT
          echo "project_dir=$PROJECT_DIR" >> $GITHUB_OUTPUT
          
          if [ -z "$SCHEMATIC_FILE" ]; then
            echo "schematic_found=false" >> $GITHUB_OUTPUT
          else
            echo "schematic_file=$SCHEMATIC_FILE" >> $GITHUB_OUTPUT
            echo "schematic_found=true" >> $GITHUB_OUTPUT
          fi
          
          if [ -z "$PCB_FILE" ]; then
            echo "pcb_found=false" >> $GITHUB_OUTPUT
          else
            echo "pcb_file=$PCB_FILE" >> $GITHUB_OUTPUT
            echo "pcb_found=true" >> $GITHUB_OUTPUT
          fi

      - name: Skip if project files not found
        if: steps.find-files.outputs.project_found != 'true'
        run: |
          echo "No KiCad project found. Skipping workflow."
          exit 0

      - name: Determine default branch
        id: default-branch
        if: steps.find-files.outputs.project_found == 'true'
        run: |
          DEFAULT_BRANCH=$(git remote show origin | grep 'HEAD branch' | cut -d' ' -f5)
          echo "default_branch=$DEFAULT_BRANCH" >> $GITHUB_OUTPUT
          echo "Default branch is: $DEFAULT_BRANCH"

      # Checkout default branch first before any operations
      - name: Checkout default branch
        if: steps.find-files.outputs.project_found == 'true'
        run: |
          DEFAULT_BRANCH="${{ steps.default-branch.outputs.default_branch }}"
          
          # Checkout the default branch
          git fetch origin $DEFAULT_BRANCH
          git checkout $DEFAULT_BRANCH || git checkout -b $DEFAULT_BRANCH

      - name: Create and set permissions on project-specific output directories
        if: steps.find-files.outputs.project_found == 'true'
        run: |
          # Clean any existing output directories to prevent conflicts
          PROJECT_NAME="${{ steps.find-files.outputs.project_name }}"
          rm -rf "${PROJECT_NAME}/docs/schematics" "${PROJECT_NAME}/docs/bom" "${PROJECT_NAME}/docs/pictures" "${PROJECT_NAME}/docs/3d_models"
          
          # Create project-specific directories
          mkdir -p "$PROJECT_NAME/docs/schematics" "$PROJECT_NAME/docs/bom" "$PROJECT_NAME/docs/pictures" "$PROJECT_NAME/docs/3d_models"
          chmod -R 777 "$PROJECT_NAME/docs"
          echo "Created project-specific directories at $PROJECT_NAME/docs"

      # Extract configuration values once - with proper trimming
      - name: Extract KiCad configuration
        id: kicad-config
        if: steps.find-files.outputs.pcb_found == 'true'
        run: |
          # Set default values
          echo "side_view_zoom_factor=1.0" >> $GITHUB_OUTPUT
          echo "side_view_rotate=\"0,0,0\"" >> $GITHUB_OUTPUT
          echo "side_view_pan=\"0,0,0\"" >> $GITHUB_OUTPUT
          echo "top_view_zoom_factor=1.0" >> $GITHUB_OUTPUT
          echo "top_view_pan=\"0,0,0\"" >> $GITHUB_OUTPUT
          echo "bottom_view_zoom_factor=1.0" >> $GITHUB_OUTPUT
          echo "bottom_view_pan=\"0,0,0\"" >> $GITHUB_OUTPUT
          echo "left_view_zoom_factor=1.0" >> $GITHUB_OUTPUT
          echo "left_view_rotate=\"0,90,0\"" >> $GITHUB_OUTPUT
          echo "left_view_pan=\"0,0,0\"" >> $GITHUB_OUTPUT
          echo "right_view_zoom_factor=1.0" >> $GITHUB_OUTPUT
          echo "right_view_rotate=\"0,-90,0\"" >> $GITHUB_OUTPUT
          echo "right_view_pan=\"0,0,0\"" >> $GITHUB_OUTPUT
          echo "front_view_zoom_factor=1.0" >> $GITHUB_OUTPUT
          echo "front_view_rotate=\"0,0,0\"" >> $GITHUB_OUTPUT
          echo "front_view_pan=\"0,0,0\"" >> $GITHUB_OUTPUT
          echo "back_view_zoom_factor=1.0" >> $GITHUB_OUTPUT
          echo "back_view_rotate=\"0,0,0\"" >> $GITHUB_OUTPUT
          echo "back_view_pan=\"0,0,0\"" >> $GITHUB_OUTPUT

          
          # Extract parameters from config file if it exists
          if [ -f ".github/kicad-config.yml" ]; then
            echo "Found configuration file"
            
            # Extract zoom factor with proper trimming
            SIDE_VIEW_ZOOM_FACTOR=$(grep 'side_view_zoom_factor:' .github/kicad-config.yml | sed 's/side_view_zoom_factor: *//' | tr -d '\n\r')
            if [ ! -z "$SIDE_VIEW_ZOOM_FACTOR" ]; then
              echo "side_view_zoom_factor=$SIDE_VIEW_ZOOM_FACTOR" >> $GITHUB_OUTPUT
            fi
            
            # Extract top view zoom factor with proper trimming
            TOP_VIEW_ZOOM_FACTOR=$(grep 'top_view_zoom_factor:' .github/kicad-config.yml | sed 's/top_view_zoom_factor: *//' | tr -d '\n\r')
            if [ ! -z "$TOP_VIEW_ZOOM_FACTOR" ]; then
              echo "top_view_zoom_factor=$TOP_VIEW_ZOOM_FACTOR" >> $GITHUB_OUTPUT
            fi

            # Extract top view pan values - preserve quotes but trim whitespace
            TOP_VIEW_PAN=$(grep 'top_view_pan:' .github/kicad-config.yml | sed 's/top_view_pan: *//' | tr -d '\n\r')
            if [ ! -z "$TOP_VIEW_PAN" ]; then
              echo "top_view_pan=$TOP_VIEW_PAN" >> $GITHUB_OUTPUT
            fi
            
            # Extract bottom view parameters (using side view as default if not specified)
            BOTTOM_VIEW_ZOOM_FACTOR=$(grep 'bottom_view_zoom_factor:' .github/kicad-config.yml | sed 's/bottom_view_zoom_factor: *//' | tr -d '\n\r')
            if [ ! -z "$BOTTOM_VIEW_ZOOM_FACTOR" ]; then
              echo "bottom_view_zoom_factor=$BOTTOM_VIEW_ZOOM_FACTOR" >> $GITHUB_OUTPUT
            else
              # Default to side view parameters if not specified
              echo "bottom_view_zoom_factor=$SIDE_VIEW_ZOOM_FACTOR" >> $GITHUB_OUTPUT
            fi

            # Extract bottom view pan values - preserve quotes but trim whitespace
            BOTTOM_VIEW_PAN=$(grep 'bottom_view_pan:' .github/kicad-config.yml | sed 's/bottom_view_pan: *//' | tr -d '\n\r')
            if [ ! -z "$BOTTOM_VIEW_PAN" ]; then
              echo "bottom_view_pan=$BOTTOM_VIEW_PAN" >> $GITHUB_OUTPUT
            fi
            
            # Extract rotate values - preserve quotes but trim whitespace
            SIDE_VIEW_ROTATE=$(grep 'side_view_rotate:' .github/kicad-config.yml | sed 's/side_view_rotate: *//' | tr -d '\n\r')
            if [ ! -z "$SIDE_VIEW_ROTATE" ]; then
              echo "side_view_rotate=$SIDE_VIEW_ROTATE" >> $GITHUB_OUTPUT
            fi
            
            # Extract pan values - preserve quotes but trim whitespace
            SIDE_VIEW_PAN=$(grep 'side_view_pan:' .github/kicad-config.yml | sed 's/side_view_pan: *//' | tr -d '\n\r')
            if [ ! -z "$SIDE_VIEW_PAN" ]; then
              echo "side_view_pan=$SIDE_VIEW_PAN" >> $GITHUB_OUTPUT
            fi

            # Extract left view parameters
            LEFT_VIEW_ZOOM_FACTOR=$(grep 'left_view_zoom_factor:' .github/kicad-config.yml | sed 's/left_view_zoom_factor: *//' | tr -d '\n\r')
            if [ ! -z "$LEFT_VIEW_ZOOM_FACTOR" ]; then
              echo "left_view_zoom_factor=$LEFT_VIEW_ZOOM_FACTOR" >> $GITHUB_OUTPUT
            else
              echo "left_view_zoom_factor=$SIDE_VIEW_ZOOM_FACTOR" >> $GITHUB_OUTPUT
            fi
            LEFT_VIEW_ROTATE=$(grep 'left_view_rotate:' .github/kicad-config.yml | sed 's/left_view_rotate: *//' | tr -d '\n\r')
            if [ ! -z "$LEFT_VIEW_ROTATE" ]; then
              echo "left_view_rotate=$LEFT_VIEW_ROTATE" >> $GITHUB_OUTPUT
            fi
            LEFT_VIEW_PAN=$(grep 'left_view_pan:' .github/kicad-config.yml | sed 's/left_view_pan: *//' | tr -d '\n\r')
            if [ ! -z "$LEFT_VIEW_PAN" ]; then
              echo "left_view_pan=$LEFT_VIEW_PAN" >> $GITHUB_OUTPUT
            else
              echo "left_view_pan=$SIDE_VIEW_PAN" >> $GITHUB_OUTPUT
            fi

            # Extract right view parameters
            RIGHT_VIEW_ZOOM_FACTOR=$(grep 'right_view_zoom_factor:' .github/kicad-config.yml | sed 's/right_view_zoom_factor: *//' | tr -d '\n\r')
            if [ ! -z "$RIGHT_VIEW_ZOOM_FACTOR" ]; then
              echo "right_view_zoom_factor=$RIGHT_VIEW_ZOOM_FACTOR" >> $GITHUB_OUTPUT
            else
              echo "right_view_zoom_factor=$SIDE_VIEW_ZOOM_FACTOR" >> $GITHUB_OUTPUT
            fi
            RIGHT_VIEW_ROTATE=$(grep 'right_view_rotate:' .github/kicad-config.yml | sed 's/right_view_rotate: *//' | tr -d '\n\r')
            if [ ! -z "$RIGHT_VIEW_ROTATE" ]; then
              echo "right_view_rotate=$RIGHT_VIEW_ROTATE" >> $GITHUB_OUTPUT
            fi
            RIGHT_VIEW_PAN=$(grep 'right_view_pan:' .github/kicad-config.yml | sed 's/right_view_pan: *//' | tr -d '\n\r')
            if [ ! -z "$RIGHT_VIEW_PAN" ]; then
              echo "right_view_pan=$RIGHT_VIEW_PAN" >> $GITHUB_OUTPUT
            else
              echo "right_view_pan=$SIDE_VIEW_PAN" >> $GITHUB_OUTPUT
            fi

            # Extract front view parameters
            FRONT_VIEW_ZOOM_FACTOR=$(grep 'front_view_zoom_factor:' .github/kicad-config.yml | sed 's/front_view_zoom_factor: *//' | tr -d '\n\r')
            if [ ! -z "$FRONT_VIEW_ZOOM_FACTOR" ]; then
              echo "front_view_zoom_factor=$FRONT_VIEW_ZOOM_FACTOR" >> $GITHUB_OUTPUT
            else
              echo "front_view_zoom_factor=$SIDE_VIEW_ZOOM_FACTOR" >> $GITHUB_OUTPUT
            fi
            FRONT_VIEW_ROTATE=$(grep 'front_view_rotate:' .github/kicad-config.yml | sed 's/front_view_rotate: *//' | tr -d '\n\r')
            if [ ! -z "$FRONT_VIEW_ROTATE" ]; then
              echo "front_view_rotate=$FRONT_VIEW_ROTATE" >> $GITHUB_OUTPUT
            fi
            FRONT_VIEW_PAN=$(grep 'front_view_pan:' .github/kicad-config.yml | sed 's/front_view_pan: *//' | tr -d '\n\r')
            if [ ! -z "$FRONT_VIEW_PAN" ]; then
              echo "front_view_pan=$FRONT_VIEW_PAN" >> $GITHUB_OUTPUT
            else
              echo "front_view_pan=$SIDE_VIEW_PAN" >> $GITHUB_OUTPUT
            fi

            # Extract back view parameters
            BACK_VIEW_ZOOM_FACTOR=$(grep 'back_view_zoom_factor:' .github/kicad-config.yml | sed 's/back_view_zoom_factor: *//' | tr -d '\n\r')
            if [ ! -z "$BACK_VIEW_ZOOM_FACTOR" ]; then
              echo "back_view_zoom_factor=$BACK_VIEW_ZOOM_FACTOR" >> $GITHUB_OUTPUT
            else
              echo "back_view_zoom_factor=$SIDE_VIEW_ZOOM_FACTOR" >> $GITHUB_OUTPUT
            fi
            BACK_VIEW_ROTATE=$(grep 'back_view_rotate:' .github/kicad-config.yml | sed 's/back_view_rotate: *//' | tr -d '\n\r')
            if [ ! -z "$BACK_VIEW_ROTATE" ]; then
              echo "back_view_rotate=$BACK_VIEW_ROTATE" >> $GITHUB_OUTPUT
            fi
            BACK_VIEW_PAN=$(grep 'back_view_pan:' .github/kicad-config.yml | sed 's/back_view_pan: *//' | tr -d '\n\r')
            if [ ! -z "$BACK_VIEW_PAN" ]; then
              echo "back_view_pan=$BACK_VIEW_PAN" >> $GITHUB_OUTPUT
            else
              echo "back_view_pan=$SIDE_VIEW_PAN" >> $GITHUB_OUTPUT
            fi
          fi

      # Pull Docker image before using it
      - name: Pull KiCad Docker image
        if: steps.find-files.outputs.project_found == 'true'
        run: docker pull ionutms/kicad_9:V1.1

      # Modified to use Docker image's built-in capabilities
      - name: Generate KiCad outputs
        if: steps.find-files.outputs.project_found == 'true'
        run: |
          PROJECT_NAME="${{ steps.find-files.outputs.project_name }}"
          
          # Run KiCad operations using the Docker image's built-in capabilities
          docker run --rm -u $(id -u):$(id -g) \
            -v ${{ github.workspace }}:/kicad_project \
            -e HOME=/tmp/home \
            ionutms/kicad_9:V1.1 \
            bash -c "set -e && \
              # Clone 3D models to a temporary directory to avoid ownership issues
              mkdir -p /tmp/3D_Models_Vault && \
              git clone https://github.com/ionutms/3D_Models_Vault.git /tmp/3D_Models_Vault && \
              
              # Create necessary directories
              mkdir -p /tmp/home/.config/kicad/9.0/colors \
              /tmp/home/.local/share/kicad/9.0/3rdparty/colors && \
              
              # Set environment variables
              export HOME=/tmp/home && \
              
              # Configure KiCad to use 3D models from temporary location
              echo '{\"environment\":{\"vars\":{\"KICAD9_3D_MODELS_VAULT\":\"/tmp/3D_Models_Vault/\"}}}' > /tmp/home/.config/kicad/9.0/kicad_common.json && \
              
              # Setup Gruvbox theme if schematic found
              if [ '${{ steps.find-files.outputs.schematic_found }}' == 'true' ]; then
                git clone --depth 1 https://github.com/AlexanderBrevig/kicad-gruvbox-theme.git /tmp/kicad-gruvbox-theme && \
                cp /tmp/kicad-gruvbox-theme/colors/Gruvbox.json /tmp/home/.local/share/kicad/9.0/3rdparty/colors/ && \
                
                # Generate PDF schematic
                kicad-cli sch export pdf \
                  --output '/tmp/schematic.pdf' \
                  '/kicad_project/${{ steps.find-files.outputs.schematic_file }}' \
                  -t gruvbox && \
                cp /tmp/schematic.pdf \"/kicad_project/$PROJECT_NAME/docs/schematics/${PROJECT_NAME}_schematics.pdf\"
              fi && \

              # Generate PCB render side view if PCB found
              if [ '${{ steps.find-files.outputs.pcb_found }}' == 'true' ]; then
                kicad-cli pcb render /kicad_project/${{ steps.find-files.outputs.pcb_file }} \
                  -o "/kicad_project/$PROJECT_NAME/docs/pictures/1_${PROJECT_NAME}_side.png" \
                  --background transparent \
                  --quality high \
                  --light-side-elevation 30 \
                  --rotate ${{ steps.kicad-config.outputs.side_view_rotate }} \
                  --pan ${{ steps.kicad-config.outputs.side_view_pan }} \
                  --zoom ${{ steps.kicad-config.outputs.side_view_zoom_factor }}
              fi && \

              # Generate PCB render top view if PCB found
              if [ '${{ steps.find-files.outputs.pcb_found }}' == 'true' ]; then
                kicad-cli pcb render /kicad_project/${{ steps.find-files.outputs.pcb_file }} \
                  -o "/kicad_project/$PROJECT_NAME/docs/pictures/2_${PROJECT_NAME}_top.png" \
                  --background transparent \
                  --quality high \
                  --light-side-elevation 60 \
                  --pan ${{ steps.kicad-config.outputs.top_view_pan }} \
                  --zoom ${{ steps.kicad-config.outputs.top_view_zoom_factor }}
              fi && \

              # Generate PCB render bottom view if PCB found
              if [ '${{ steps.find-files.outputs.pcb_found }}' == 'true' ]; then
                kicad-cli pcb render /kicad_project/${{ steps.find-files.outputs.pcb_file }} \
                  -o "/kicad_project/$PROJECT_NAME/docs/pictures/3_${PROJECT_NAME}_bottom.png" \
                  --background transparent \
                  --quality high \
                  --light-side-elevation 60 \
                  --side bottom \
                  --pan ${{ steps.kicad-config.outputs.bottom_view_pan }} \
                  --zoom ${{ steps.kicad-config.outputs.bottom_view_zoom_factor }}
              fi && \

              # Generate PCB render left side view if PCB found
              if [ '${{ steps.find-files.outputs.pcb_found }}' == 'true' ]; then
                kicad-cli pcb render /kicad_project/${{ steps.find-files.outputs.pcb_file }} \
                  -o "/kicad_project/$PROJECT_NAME/docs/pictures/4_${PROJECT_NAME}_left.png" \
                  --background transparent \
                  --quality high \
                  --light-side-elevation 10 \
                  --side left \
                  --pan ${{ steps.kicad-config.outputs.left_view_pan }} \
                  --zoom ${{ steps.kicad-config.outputs.left_view_zoom_factor }}
              fi && \

              # Generate PCB render right side view if PCB found
              if [ '${{ steps.find-files.outputs.pcb_found }}' == 'true' ]; then
                kicad-cli pcb render /kicad_project/${{ steps.find-files.outputs.pcb_file }} \
                  -o "/kicad_project/$PROJECT_NAME/docs/pictures/5_${PROJECT_NAME}_right.png" \
                  --background transparent \
                  --quality high \
                  --light-side-elevation 10 \
                  --side right \
                  --pan ${{ steps.kicad-config.outputs.right_view_pan }} \
                  --zoom ${{ steps.kicad-config.outputs.right_view_zoom_factor }}
              fi && \

              # Generate PCB render front view if PCB found
              if [ '${{ steps.find-files.outputs.pcb_found }}' == 'true' ]; then
                kicad-cli pcb render /kicad_project/${{ steps.find-files.outputs.pcb_file }} \
                  -o "/kicad_project/$PROJECT_NAME/docs/pictures/6_${PROJECT_NAME}_front.png" \
                  --background transparent \
                  --quality high \
                  --light-side-elevation 10 \
                  --side front \
                  --rotate ${{ steps.kicad-config.outputs.front_view_rotate }} \
                  --pan ${{ steps.kicad-config.outputs.front_view_pan }} \
                  --zoom ${{ steps.kicad-config.outputs.front_view_zoom_factor }}
              fi && \

              # Generate PCB render back view if PCB found
              if [ '${{ steps.find-files.outputs.pcb_found }}' == 'true' ]; then
                kicad-cli pcb render /kicad_project/${{ steps.find-files.outputs.pcb_file }} \
                  -o "/kicad_project/$PROJECT_NAME/docs/pictures/7_${PROJECT_NAME}_back.png" \
                  --background transparent \
                  --quality high \
                  --light-side-elevation 10 \
                  --side back \
                  --rotate ${{ steps.kicad-config.outputs.back_view_rotate }} \
                  --pan ${{ steps.kicad-config.outputs.back_view_pan }} \
                  --zoom ${{ steps.kicad-config.outputs.back_view_zoom_factor }}
              fi && \

              # Generate Interactive HTML BOM if PCB found - using Docker image's wrapper
              if [ '${{ steps.find-files.outputs.pcb_found }}' == 'true' ]; then
                # Change to a writable directory to avoid permission issues
                cd /tmp && \
                
                # Use the Docker image's built-in wrapper script for InteractiveHtmlBom
                generate_ibom \
                  --show-fields=Reference,Value,Footprint \
                  --group-fields=Value,Footprint \
                  --name-format=\"${PROJECT_NAME}_ibom\" \
                  --no-browser \
                  --dest-dir=/tmp \
                  '/kicad_project/${{ steps.find-files.outputs.pcb_file }}' && \
                  
                # Move the generated file to the documentation directory
                if [ -f \"/tmp/${PROJECT_NAME}_ibom.html\" ]; then
                  mv \"/tmp/${PROJECT_NAME}_ibom.html\" \"/kicad_project/$PROJECT_NAME/docs/bom/\"
                else
                  echo 'Generated BOM file not found in expected location'
                  find /tmp -name '*ibom*.html' 2>/dev/null || true
                fi
              fi"

      - name: Check for generated files
        id: check-files
        if: steps.find-files.outputs.project_found == 'true'
        run: |
          PROJECT_NAME="${{ steps.find-files.outputs.project_name }}"
          
          PDF_COUNT=$(find "${PROJECT_NAME}/docs/schematics" -type f -name "*.pdf" | wc -l || echo "0")
          PNG_COUNT=$(find "${PROJECT_NAME}/docs/pictures" -type f -name "*.png" | wc -l || echo "0")
          HTML_COUNT=$(find "${PROJECT_NAME}/docs/bom" -type f -name "*.html" | wc -l || echo "0")
          TOTAL_COUNT=$((PDF_COUNT + PNG_COUNT + HTML_COUNT))

          echo "Found $PDF_COUNT PDF files, $PNG_COUNT PNG files, and $HTML_COUNT HTML files in ${PROJECT_NAME}/docs"
          
          if [ "$TOTAL_COUNT" -gt 0 ]; then
            echo "files_generated=true" >> $GITHUB_OUTPUT
            echo "Files generated successfully"
          else
            echo "files_generated=false" >> $GITHUB_OUTPUT
            echo "No files were generated, checking for errors..."
          fi

      - name: Upload outputs as artifacts
        if: steps.find-files.outputs.project_found == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: kicad-outputs-${{ steps.find-files.outputs.project_name }}
          path: |
            ${{ steps.find-files.outputs.project_name }}/docs/schematics/
            ${{ steps.find-files.outputs.project_name }}/docs/bom/
            ${{ steps.find-files.outputs.project_name }}/docs/pictures/
          retention-days: 1
          if-no-files-found: warn

      - name: Configure Git
        if: steps.check-files.outputs.files_generated == 'true'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

      - name: Commit and push changes
        if: steps.check-files.outputs.files_generated == 'true'
        run: |
          PROJECT_NAME="${{ steps.find-files.outputs.project_name }}"
          
          # Add the files
          git add "${PROJECT_NAME}/docs/schematics" "${PROJECT_NAME}/docs/bom" "${PROJECT_NAME}/docs/pictures"
          
          # Check if there are changes to commit
          if git diff --staged --quiet; then
            echo "No changes to commit"
          else
            echo "Committing changes"
            git commit -m "Update KiCad documentation for ${PROJECT_NAME} (schematics and PCB renders)"
            
            # Push with error handling
            echo "Pushing to current branch"
            git push origin HEAD || git push -u origin HEAD
          fi

      - name: Trigger 3D Models Generation Workflow
        if: steps.check-files.outputs.files_generated == 'true'
        uses: peter-evans/repository-dispatch@v3
        with:
          token: ${{ secrets.REPO_DISPATCH_TOKEN }}
          event-type: generate-3d-models
          client-payload: |
            {
              "source_repo": "${{ github.repository }}",
              "project_name": "${{ steps.find-files.outputs.project_name }}",
              "ref": "${{ github.ref }}",
              "sha": "${{ github.sha }}"
            }

      - name: Run Symbol Check
        if: steps.check-files.outputs.files_generated == 'true'
        run: |
          # Get repository information
          SOURCE_REPO="${{ github.repository }}"
          SOURCE_REF="${{ github.sha }}"
          PROJECT_NAME="${{ steps.find-files.outputs.project_name }}"
          PICTURES_PATH="$PROJECT_NAME/docs/pictures"
          
          echo "Running symbol check for repository: $SOURCE_REPO"
          echo "Source ref: $SOURCE_REF"
          echo "Pictures path: $PICTURES_PATH"
          
          # Try to trigger the symbol check with retries
          MAX_RETRIES=3
          RETRY_COUNT=0
          
          while [ $RETRY_COUNT -lt $MAX_RETRIES ]; do
            # Make API call to KiCAD Symbols Generator
            HTTP_RESPONSE=$(curl -s -w "\n%{http_code}" -X POST \
              -H "Accept: application/vnd.github.v3+json" \
              -H "Authorization: token ${{ secrets.REPO_DISPATCH_TOKEN }}" \
              https://api.github.com/repos/ionutms/KiCAD_Symbols_Generator/dispatches \
              -d "{
                \"event_type\": \"check_pictures\",
                \"client_payload\": {
                  \"source_repo\": \"$SOURCE_REPO\",
                  \"source_ref\": \"$SOURCE_REF\",
                  \"pictures_path\": \"$PICTURES_PATH\"
                }
              }")
            
            # Extract the HTTP status code
            HTTP_STATUS=$(echo "$HTTP_RESPONSE" | tail -n1)
            RESPONSE_BODY=$(echo "$HTTP_RESPONSE" | sed '$d')
            
            if [ "$HTTP_STATUS" -eq 204 ] || [ "$HTTP_STATUS" -eq 200 ]; then
              echo "✅ Symbol check triggered successfully"
              echo "Response: $RESPONSE_BODY"
              break
            else
              echo "⚠️ Attempt $((RETRY_COUNT + 1)) failed with HTTP status: $HTTP_STATUS"
              echo "Response: $RESPONSE_BODY"
              
              # Increment retry count
              RETRY_COUNT=$((RETRY_COUNT + 1))
              
              # Wait before retrying (exponential backoff)
              if [ $RETRY_COUNT -lt $MAX_RETRIES ]; then
                WAIT_TIME=$((RETRY_COUNT * 30))  # Wait 30, 60, 90 seconds for retries
                echo "Waiting $WAIT_TIME seconds before retry..."
                sleep $WAIT_TIME
              fi
            fi
          done
          
          # If all retries failed, report error
          if [ $RETRY_COUNT -ge $MAX_RETRIES ]; then
            echo "❌ Failed to trigger symbol check after $MAX_RETRIES attempts"
            echo "This may be due to GitHub API rate limits or other issues."
            exit 1
          fi