name: Generate KiCad 3D Models
on:
  workflow_dispatch:
  repository_dispatch:
    types: [generate-3d-models]

jobs:
  generate-kicad-3d-models:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      actions: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Find KiCad project files
        id: find-files
        run: |
          PROJECT_FILE=$(find . -name "*.kicad_pro" | head -n 1)
          
          if [ -z "$PROJECT_FILE" ]; then
            echo "No KiCad project files found"
            echo "project_found=false" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          PROJECT_DIR=$(dirname "$PROJECT_FILE")
          PROJECT_NAME=$(basename "$PROJECT_FILE" .kicad_pro)
          
          echo "PROJECT_FILE: $PROJECT_FILE"
          echo "PROJECT_DIR: $PROJECT_DIR"
          echo "PROJECT_NAME: $PROJECT_NAME"
          
          PCB_FILE=$(find "$PROJECT_DIR" -name "${PROJECT_NAME}.kicad_pcb" | head -n 1)
          
          echo "project_file=$PROJECT_FILE" >> $GITHUB_OUTPUT
          echo "project_found=true" >> $GITHUB_OUTPUT
          echo "project_name=$PROJECT_NAME" >> $GITHUB_OUTPUT
          echo "project_dir=$PROJECT_DIR" >> $GITHUB_OUTPUT
          
          if [ -z "$PCB_FILE" ]; then
            echo "pcb_found=false" >> $GITHUB_OUTPUT
          else
            echo "pcb_file=$PCB_FILE" >> $GITHUB_OUTPUT
            echo "pcb_found=true" >> $GITHUB_OUTPUT
          fi

      - name: Skip if project files not found
        if: steps.find-files.outputs.project_found != 'true'
        run: |
          echo "No KiCad project found. Skipping workflow."
          exit 0

      - name: Skip if PCB file not found
        if: steps.find-files.outputs.pcb_found != 'true'
        run: |
          echo "No PCB file found. Cannot generate 3D models without PCB."
          exit 0

      - name: Clean up old 3D model artifacts
        if: steps.find-files.outputs.project_found == 'true' && steps.find-files.outputs.pcb_found == 'true'
        continue-on-error: true  # Don't fail the workflow if cleanup fails
        run: |
          PROJECT_NAME="${{ steps.find-files.outputs.project_name }}"
          ARTIFACT_NAME="kicad-3d-models-${PROJECT_NAME}"
          
          echo "Cleaning up old artifacts with name pattern: ${ARTIFACT_NAME}"
          
          # Get list of artifacts and delete matching ones
          gh api repos/${{ github.repository }}/actions/artifacts \
            --jq ".artifacts[] | select(.name | startswith(\"${ARTIFACT_NAME}\")) | .id" \
            | while read artifact_id; do
              if [ -n "$artifact_id" ]; then
                echo "Deleting artifact ID: $artifact_id"
                gh api --method DELETE repos/${{ github.repository }}/actions/artifacts/$artifact_id || true
              fi
            done
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create 3D models output directory
        run: |
          PROJECT_NAME="${{ steps.find-files.outputs.project_name }}"
          rm -rf "${PROJECT_NAME}/docs/3d_models"
          mkdir -p "$PROJECT_NAME/docs/3d_models"
          chmod -R 777 "$PROJECT_NAME/docs"
          echo "Created 3D models directory at $PROJECT_NAME/docs/3d_models"

      - name: Pull KiCad Docker image
        run: docker pull ionutms/kicad_9:V1.1

      - name: Generate 3D models
        run: |
          PROJECT_NAME="${{ steps.find-files.outputs.project_name }}"
          
          docker run --rm -u $(id -u):$(id -g) \
            -v ${{ github.workspace }}:/kicad_project \
            -e HOME=/tmp/home \
            ionutms/kicad_9:V1.1 \
            bash -c "set -e && \
              mkdir -p /tmp/3D_Models_Vault && \
              git clone https://github.com/ionutms/3D_Models_Vault.git /tmp/3D_Models_Vault && \
              
              mkdir -p /tmp/home/.config/kicad/9.0/colors \
              /tmp/home/.local/share/kicad/9.0/3rdparty/colors && \
              
              export HOME=/tmp/home && \
              
              echo '{\"environment\":{\"vars\":{\"KICAD9_3D_MODELS_VAULT\":\"/tmp/3D_Models_Vault/\"}}}' > /tmp/home/.config/kicad/9.0/kicad_common.json && \

              kicad-cli pcb export glb /kicad_project/${{ steps.find-files.outputs.pcb_file }} \
                -o \"/kicad_project/$PROJECT_NAME/docs/3d_models/${PROJECT_NAME}.glb\" \
                --include-tracks --include-pads --include-zones --include-silkscreen --include-soldermask --subst-models && \

              kicad-cli pcb export vrml /kicad_project/${{ steps.find-files.outputs.pcb_file }} \
                -o \"/kicad_project/$PROJECT_NAME/docs/3d_models/${PROJECT_NAME}.wrl\""

      - name: Check for generated 3D models
        id: check-files
        run: |
          PROJECT_NAME="${{ steps.find-files.outputs.project_name }}"
          
          GLB_COUNT=$(find "${PROJECT_NAME}/docs/3d_models" -type f -name "*.glb" | wc -l || echo "0")
          WRL_COUNT=$(find "${PROJECT_NAME}/docs/3d_models" -type f -name "*.wrl" | wc -l || echo "0")
          TOTAL_COUNT=$((GLB_COUNT + WRL_COUNT))

          echo "Found $GLB_COUNT GLB files and $WRL_COUNT WRL files in ${PROJECT_NAME}/docs/3d_models"
          
          if [ "$TOTAL_COUNT" -gt 0 ]; then
            echo "files_generated=true" >> $GITHUB_OUTPUT
            echo "3D models generated successfully"
          else
            echo "files_generated=false" >> $GITHUB_OUTPUT
            echo "No 3D models were generated"
          fi

      - name: Upload 3D models as artifacts
        uses: actions/upload-artifact@v4
        with:
          name: kicad-3d-models-${{ steps.find-files.outputs.project_name }}
          path: ${{ steps.find-files.outputs.project_name }}/docs/3d_models/
          retention-days: 1
          if-no-files-found: warn

      - name: Trigger workflow in target repository
        if: steps.check-files.outputs.files_generated == 'true'
        uses: peter-evans/repository-dispatch@v3
        with:
          token: ${{ secrets.REPO_DISPATCH_TOKEN }}
          repository: ionutms/Docker_3D_Models_Hosting
          event-type: kicad-3d-models-ready
          client-payload: |
            {
              "source_repo": "${{ github.repository }}",
              "run_id": "${{ github.run_id }}",
              "project_name": "${{ steps.find-files.outputs.project_name }}",
              "artifact_name": "kicad-3d-models-${{ steps.find-files.outputs.project_name }}",
              "ref": "${{ github.ref }}",
              "sha": "${{ github.sha }}"
            }