name: Distribute Workflows

on:
  push:
    branches:
      - distribute
  workflow_dispatch:
    inputs:
      sync_to_main:
        description: 'Sync doc_workflow to main after distribution'
        required: false
        type: boolean
        default: true

jobs:
  distribute:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout source repository
        uses: actions/checkout@v4

      - name: Setup Git
        run: |
          git config --global user.name "GitHub Actions Bot"
          git config --global user.email "actions@github.com"

      - name: Distribute workflows to doc_workflow branch
        env:
          GITHUB_TOKEN: ${{ secrets.WORKFLOW_DISTRIBUTION_TOKEN }}
        run: |
          # Define target repositories
          REPOS=(
            "ionutms/Minimal_ADP1032"
            "ionutms/Minimal_ADP1074"
          )
          
          # Target branch for workflow distribution
          TARGET_BRANCH="doc_workflow"
          
          # Directory containing workflow templates
          WORKFLOW_DIR="workflows"
          
          # Check if workflows directory exists
          if [ ! -d "$WORKFLOW_DIR" ]; then
            echo "❌ Error: $WORKFLOW_DIR directory not found!"
            exit 1
          fi
          
          # Check if there are any workflow files
          if [ -z "$(ls -A $WORKFLOW_DIR 2>/dev/null)" ]; then
            echo "❌ Error: No files found in $WORKFLOW_DIR directory!"
            exit 1
          fi
          
          echo "Found workflows:"
          ls -la "$WORKFLOW_DIR"
          echo ""
          
          # Process each repository
          for repo in "${REPOS[@]}"; do
            echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
            echo "Processing repository: $repo"
            echo "Target branch: $TARGET_BRANCH"
            echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
            
            # Clone the target repository
            echo "→ Cloning repository..."
            if ! git clone --branch "$TARGET_BRANCH" --single-branch \
              "https://x-access-token:${GITHUB_TOKEN}@github.com/${repo}.git" \
              "temp-${repo##*/}" 2>&1; then
              echo "❌ Failed to clone $repo on branch $TARGET_BRANCH"
              echo "   Make sure the branch exists and you have access"
              continue
            fi
            
            cd "temp-${repo##*/}"
            
            # Create .github/workflows directory if it doesn't exist
            mkdir -p .github/workflows
            
            # Copy all workflow files
            echo "→ Copying workflow files..."
            if cp -v "../${WORKFLOW_DIR}"/* .github/workflows/ 2>&1; then
              echo "✓ Files copied successfully"
            else
              echo "❌ Failed to copy workflow files"
              cd ..
              rm -rf "temp-${repo##*/}"
              continue
            fi
            
            # Show git status
            echo ""
            echo "→ Git status:"
            git status
            echo ""
            
            # Check if there are changes
            if [[ -n $(git status -s) ]]; then
              echo "→ Committing changes..."
              git add .github/workflows
              
              if git commit -m "chore: update workflows from central repository" 2>&1; then
                echo "✓ Commit created successfully"
              else
                echo "❌ Failed to create commit"
                cd ..
                rm -rf "temp-${repo##*/}"
                continue
              fi
              
              echo "→ Pushing to $TARGET_BRANCH..."
              if git push origin "$TARGET_BRANCH" 2>&1; then
                echo "✓ Successfully pushed workflows to $TARGET_BRANCH"
              else
                echo "❌ Failed to push to $TARGET_BRANCH"
              fi
            else
              echo "○ No changes needed in $TARGET_BRANCH"
            fi
            
            cd ..
            rm -rf "temp-${repo##*/}"
            echo ""
          done
          
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "Workflow distribution to doc_workflow completed!"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"

      - name: Sync doc_workflow to main
        if: github.event.inputs.sync_to_main != 'false'
        env:
          GITHUB_TOKEN: ${{ secrets.WORKFLOW_DISTRIBUTION_TOKEN }}
        run: |
          REPOS=(
            "ionutms/Minimal_ADP1032"
            "ionutms/Minimal_ADP1074"
          )
          
          echo ""
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "Syncing doc_workflow → main"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          
          for repo in "${REPOS[@]}"; do
            echo ""
            echo "Repository: $repo"
            
            # Get the latest commit SHA from doc_workflow
            doc_workflow_sha=$(curl -s -H "Authorization: token ${GITHUB_TOKEN}" \
              "https://api.github.com/repos/${repo}/git/ref/heads/doc_workflow" \
              | jq -r '.object.sha')
            
            if [ "$doc_workflow_sha" = "null" ] || [ -z "$doc_workflow_sha" ]; then
              echo "  ✗ Failed: Could not get doc_workflow SHA"
              continue
            fi
            
            echo "  doc_workflow SHA: ${doc_workflow_sha:0:7}"
            
            # Update main branch to point to doc_workflow commit
            response=$(curl -s -X PATCH \
              -H "Authorization: token ${GITHUB_TOKEN}" \
              -H "Accept: application/vnd.github.v3+json" \
              "https://api.github.com/repos/${repo}/git/refs/heads/main" \
              -d "{\"sha\": \"$doc_workflow_sha\", \"force\": true}")
            
            if echo "$response" | jq -e '.object.sha' > /dev/null 2>&1; then
              echo "  ✓ Successfully synced doc_workflow → main"
            else
              error_msg=$(echo "$response" | jq -r '.message // "Unknown error"')
              echo "  ✗ Failed to sync: $error_msg"
            fi
          done
          
          echo ""
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "Branch sync completed!"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"