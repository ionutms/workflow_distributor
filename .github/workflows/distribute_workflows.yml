name: Distribute Workflows and Secrets

on:
  push:
    branches:
      - distribute
  workflow_dispatch:
    inputs:
      distribute_secrets:
        description: 'Distribute secrets to repositories'
        required: false
        default: true
        type: boolean
      distribute_workflows:
        description: 'Distribute workflows to repositories'
        required: false
        default: true
        type: boolean

env:
  # Format: repo_name|secrets|workflows
  # Use 'true' or 'false' for each flag
  TARGET_REPOS: >-
    ionutms/Minimal_AD74416H|true|true
    ionutms/Minimal_AD74416H_Stack_Adapter|true|true
    ionutms/AD74416H_Power_Interface_Module|true|true
    ionutms/Modular_AD74416H_PLC|true|true
    ionutms/Minimal_ADP1074|true|true
    ionutms/Minimal_ADPL76030|true|true
    ionutms/Minimal_ADP1032|true|true
    ionutms/Minimal_MAX14906|true|true
    ionutms/Minimal_AD74413R|true|true
    ionutms/Modular_Software_Configurable_IO_PLC|true|true
    ionutms/Minimal_ADIN1110|true|true
    ionutms/Minimal_LTC9111|true|true
    ionutms/Minimal_MAX17761|true|true
    ionutms/Minimal_LT8304|true|true
    ionutms/Minimal_MAX32650|true|true
    ionutms/Minimal_ADP1031|true|true
    ionutms/Minimal_MAX17570|true|true
    ionutms/Docker_3D_Models_Hosting|true|false

jobs:
  distribute-secrets:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || (github.event_name == 'workflow_dispatch' && inputs.distribute_secrets == true)
    steps:
      - name: Distribute REPO_DISPATCH_TOKEN to target repositories
        env:
          GH_TOKEN: ${{ secrets.WORKFLOW_DISTRIBUTION_TOKEN }}
          SECRET_VALUE: ${{ secrets.REPO_DISPATCH_TOKEN }}
        run: |
          set +e  # Disable exit on error for the entire script
          
          # Parse TARGET_REPOS into arrays
          REPO_LIST=()
          SECRET_FLAGS=()
          
          while IFS= read -r line; do
            if [ -n "$line" ]; then
              IFS='|' read -r repo secret_flag workflow_flag <<< "$line"
              REPO_LIST+=("$repo")
              SECRET_FLAGS+=("$secret_flag")
            fi
          done <<< "$TARGET_REPOS"
          
          echo "┌────────────────────────────────────────┐"
          echo "Starting secret distribution"
          echo "└────────────────────────────────────────┘"
          echo ""
          
          SUCCESS_COUNT=0
          FAIL_COUNT=0
          SKIP_COUNT=0
          
          # Process each repository
          for i in "${!REPO_LIST[@]}"; do
            repo="${REPO_LIST[$i]}"
            secret_flag="${SECRET_FLAGS[$i]}"
            
            echo "→ Processing: $repo"
            
            # Check if secrets should be distributed to this repo
            if [ "$secret_flag" != "true" ]; then
              echo "  ○ Skipping secret distribution (disabled for this repo)"
              SKIP_COUNT=$((SKIP_COUNT + 1))
              echo ""
              continue
            fi
            
            # Set secret and capture exit code
            gh secret set REPO_DISPATCH_TOKEN \
              --repo "$repo" \
              --body "$SECRET_VALUE"
            EXIT_CODE=$?
            
            if [ $EXIT_CODE -eq 0 ]; then
              echo "  ✅ Successfully distributed to $repo"
              SUCCESS_COUNT=$((SUCCESS_COUNT + 1))
            else
              echo "  ❌ Failed to distribute to $repo (exit code: $EXIT_CODE)"
              FAIL_COUNT=$((FAIL_COUNT + 1))
            fi
            echo ""
          done
          
          echo "┌────────────────────────────────────────┐"
          echo "Secret Distribution Summary:"
          echo "  ✅ Successful: $SUCCESS_COUNT"
          echo "  ❌ Failed: $FAIL_COUNT"
          echo "  ○ Skipped: $SKIP_COUNT"
          echo "  📊 Total: ${#REPO_LIST[@]}"
          echo "└────────────────────────────────────────┘"
          
          # Exit with error if any distribution failed
          if [ $FAIL_COUNT -gt 0 ]; then
            exit 1
          fi

  distribute-workflows:
    runs-on: ubuntu-latest
    needs: distribute-secrets
    if: |
      always() && 
      (needs.distribute-secrets.result == 'success' || needs.distribute-secrets.result == 'skipped') &&
      (github.event_name == 'push' || (github.event_name == 'workflow_dispatch' && inputs.distribute_workflows == true))
    steps:
      - name: Checkout source repository
        uses: actions/checkout@v4

      - name: Setup Git
        run: |
          git config --global user.name "GitHub Actions Bot"
          git config --global user.email "actions@github.com"

      - name: Distribute workflows and sync branches
        env:
          GITHUB_TOKEN: ${{ secrets.WORKFLOW_DISTRIBUTION_TOKEN }}
        run: |
          # Parse TARGET_REPOS into arrays
          REPO_LIST=()
          WORKFLOW_FLAGS=()
          
          while IFS= read -r line; do
            if [ -n "$line" ]; then
              IFS='|' read -r repo secret_flag workflow_flag <<< "$line"
              REPO_LIST+=("$repo")
              WORKFLOW_FLAGS+=("$workflow_flag")
            fi
          done <<< "$TARGET_REPOS"
          
          # Directory containing workflow templates
          WORKFLOW_DIR="workflows"
          
          # Check if workflows directory exists
          if [ ! -d "$WORKFLOW_DIR" ]; then
            echo "❌ Error: $WORKFLOW_DIR directory not found!"
            exit 1
          fi
          
          # Check if there are any workflow files
          if [ -z "$(ls -A $WORKFLOW_DIR 2>/dev/null)" ]; then
            echo "❌ Error: No files found in $WORKFLOW_DIR directory!"
            exit 1
          fi
          
          echo "Found workflows:"
          ls -la "$WORKFLOW_DIR"
          echo ""
          
          SUCCESS_COUNT=0
          SKIP_COUNT=0
          
          # Process each repository
          for i in "${!REPO_LIST[@]}"; do
            repo="${REPO_LIST[$i]}"
            workflow_flag="${WORKFLOW_FLAGS[$i]}"
            
            echo "┌────────────────────────────────────────┐"
            echo "Processing repository: $repo"
            echo "└────────────────────────────────────────┘"
            
            # Check if workflows should be distributed to this repo
            if [ "$workflow_flag" != "true" ]; then
              echo "○ Skipping workflow distribution (disabled for this repo)"
              SKIP_COUNT=$((SKIP_COUNT + 1))
              echo ""
              continue
            fi
            
            # Clone the target repository (fetch both main and doc_workflow)
            echo "→ Cloning repository..."
            if ! git clone "https://x-access-token:${GITHUB_TOKEN}@github.com/${repo}.git" "temp-${repo##*/}" 2>&1; then
              echo "❌ Failed to clone $repo"
              echo "   Make sure you have access"
              continue
            fi
            
            cd "temp-${repo##*/}"
            
            # Checkout main branch
            git checkout main
            
            # Create .github/workflows directory if it doesn't exist
            mkdir -p .github/workflows
            
            # Get list of workflow files in source directory
            echo "→ Getting list of workflow files from source..."
            SOURCE_WORKFLOWS=()
            for workflow_file in "../${WORKFLOW_DIR}"/*; do
              if [ -f "$workflow_file" ]; then
                SOURCE_WORKFLOWS+=("$(basename "$workflow_file")")
              fi
            done
            
            # Remove extra workflow files in target that don't exist in source
            echo "→ Checking for extra workflow files in target repository..."
            for target_file in .github/workflows/*; do
              if [ -f "$target_file" ]; then
                target_basename=$(basename "$target_file")
                
                # Check if this file exists in source
                found_in_source=false
                for source_file in "${SOURCE_WORKFLOWS[@]}"; do
                  if [ "$target_basename" = "$source_file" ]; then
                    found_in_source=true
                    break
                  fi
                done
                
                # If not found in source, remove it
                if [ "$found_in_source" = false ]; then
                  echo "→ Removing extra workflow file: $target_basename"
                  rm "$target_file"
                fi
              fi
            done
            
            # Copy all workflow files
            echo "→ Copying workflow files to main..."
            if cp -v "../${WORKFLOW_DIR}"/* .github/workflows/ 2>&1; then
              echo "✅ Files copied successfully"
            else
              echo "❌ Failed to copy workflow files"
              cd ..
              rm -rf "temp-${repo##*/}"
              continue
            fi
            
            # Copy kicad-config.yml to .github directory only if it doesn't exist
            if [ ! -f ".github/kicad-config.yml" ]; then
              echo "→ Copying kicad-config.yml file..."
              if cp -v "../configs/kicad-config.yml" .github/ 2>&1; then
                echo "✅ kicad-config.yml copied successfully"
              else
                echo "○ kicad-config.yml not found in source, skipping..."
              fi
            else
              echo "○ kicad-config.yml already exists in target repository, skipping..."
            fi
            
            # Check if there are changes on main
            if [[ -n $(git status -s) ]]; then
              echo "→ Committing changes to main..."
              git add .github/workflows
              # Only add kicad-config.yml if we just copied it
              if [ -f ".github/kicad-config.yml" ]; then
                git add .github/kicad-config.yml
              fi
              
              if git commit -m "chore: update workflows and kicad config from central repository" 2>&1; then
                echo "✅ Commit created on main"
              else
                echo "❌ Failed to create commit"
                cd ..
                rm -rf "temp-${repo##*/}"
                continue
              fi
              
              echo "→ Pushing main..."
              if git push origin main 2>&1; then
                echo "✅ Successfully pushed to main"
                SUCCESS_COUNT=$((SUCCESS_COUNT + 1))
              else
                echo "❌ Failed to push to main"
                cd ..
                rm -rf "temp-${repo##*/}"
                continue
              fi
            else
              echo "○ No changes needed on main"
              SUCCESS_COUNT=$((SUCCESS_COUNT + 1))
            fi
            
            # Now handle doc_workflow branch
            echo ""
            echo "→ Switching to doc_workflow branch..."
            
            # Check if doc_workflow branch exists remotely
            if git ls-remote --heads origin doc_workflow | grep -q doc_workflow; then
              # Checkout existing doc_workflow branch
              if git checkout doc_workflow 2>&1; then
                echo "✅ Checked out doc_workflow branch"
                
                # Pull latest from main
                echo "→ Pulling changes from main..."
                if git pull origin main --no-edit 2>&1; then
                  echo "✅ Successfully pulled from main to doc_workflow"
                  
                  # Push updated doc_workflow
                  echo "→ Pushing doc_workflow..."
                  if git push origin doc_workflow 2>&1; then
                    echo "✅ Successfully pushed doc_workflow"
                  else
                    echo "❌ Failed to push doc_workflow"
                  fi
                else
                  echo "⚠ Pull from main had conflicts or failed"
                  echo "→ Attempting to reset doc_workflow to match main..."
                  
                  # Get main SHA
                  git checkout main
                  main_sha=$(git rev-parse HEAD)
                  
                  # Force doc_workflow to match main
                  git checkout doc_workflow
                  git reset --hard "$main_sha"
                  
                  if git push origin doc_workflow --force 2>&1; then
                    echo "✅ Force updated doc_workflow to match main"
                  else
                    echo "❌ Failed to force update doc_workflow"
                  fi
                fi
              else
                echo "❌ Failed to checkout doc_workflow"
              fi
            else
              echo "○ doc_workflow branch does not exist, skipping..."
            fi
            
            cd ..
            rm -rf "temp-${repo##*/}"
            echo ""
          done
          
          echo "┌────────────────────────────────────────┐"
          echo "Workflow Distribution Summary:"
          echo "  ✅ Successful: $SUCCESS_COUNT"
          echo "  ○ Skipped: $SKIP_COUNT"
          echo "  📊 Total: ${#REPO_LIST[@]}"
          echo "└────────────────────────────────────────┘"