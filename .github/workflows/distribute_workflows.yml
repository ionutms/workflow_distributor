name: Distribute Workflows

on:
  push:
    branches:
      - distribute
  workflow_dispatch:
    inputs:
      auto_merge:
        description: 'Auto-merge doc_workflow to main'
        required: false
        type: boolean
        default: true

jobs:
  distribute:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout source repository
        uses: actions/checkout@v4

      - name: Setup Git
        run: |
          git config --global user.name "GitHub Actions Bot"
          git config --global user.email "actions@github.com"

      - name: Distribute workflows to doc_workflow branch
        env:
          GITHUB_TOKEN: ${{ secrets.WORKFLOW_DISTRIBUTION_TOKEN }}
        run: |
          # Define target repositories
          REPOS=(
            "ionutms/Minimal_ADP1032"
            "ionutms/Minimal_ADP1074"
            "ionutms/Minimal_AD74413R"
          )
          
          # Target branch for workflow distribution
          TARGET_BRANCH="doc_workflow"
          
          # Directory containing workflow templates
          WORKFLOW_DIR="workflows"
          
          # Check if workflows directory exists
          if [ ! -d "$WORKFLOW_DIR" ]; then
            echo "❌ Error: $WORKFLOW_DIR directory not found!"
            exit 1
          fi
          
          # Check if there are any workflow files
          if [ -z "$(ls -A $WORKFLOW_DIR 2>/dev/null)" ]; then
            echo "❌ Error: No files found in $WORKFLOW_DIR directory!"
            exit 1
          fi
          
          echo "Found workflows:"
          ls -la "$WORKFLOW_DIR"
          echo ""
          
          # Store repos that had changes
          echo "" > /tmp/changed_repos.txt
          
          # Process each repository
          for repo in "${REPOS[@]}"; do
            echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
            echo "Processing repository: $repo"
            echo "Target branch: $TARGET_BRANCH"
            echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
            
            # Clone the target repository
            echo "→ Cloning repository..."
            if ! git clone --branch "$TARGET_BRANCH" --single-branch \
              "https://x-access-token:${GITHUB_TOKEN}@github.com/${repo}.git" \
              "temp-${repo##*/}" 2>&1; then
              echo "❌ Failed to clone $repo on branch $TARGET_BRANCH"
              echo "   Make sure the branch exists and you have access"
              continue
            fi
            
            cd "temp-${repo##*/}"
            
            # Create .github/workflows directory if it doesn't exist
            mkdir -p .github/workflows
            
            # Copy all workflow files
            echo "→ Copying workflow files..."
            if cp -v "../${WORKFLOW_DIR}"/* .github/workflows/ 2>&1; then
              echo "✓ Files copied successfully"
            else
              echo "❌ Failed to copy workflow files"
              cd ..
              rm -rf "temp-${repo##*/}"
              continue
            fi
            
            # Check if there are changes
            if [[ -n $(git status -s) ]]; then
              echo "→ Committing changes..."
              git add .github/workflows
              
              if git commit -m "chore: update workflows from central repository" 2>&1; then
                echo "✓ Commit created successfully"
              else
                echo "❌ Failed to create commit"
                cd ..
                rm -rf "temp-${repo##*/}"
                continue
              fi
              
              echo "→ Pushing to $TARGET_BRANCH..."
              if git push origin "$TARGET_BRANCH" 2>&1; then
                echo "✓ Successfully pushed workflows to $TARGET_BRANCH"
                echo "$repo" >> /tmp/changed_repos.txt
              else
                echo "❌ Failed to push to $TARGET_BRANCH"
              fi
            else
              echo "○ No changes needed in $TARGET_BRANCH"
            fi
            
            cd ..
            rm -rf "temp-${repo##*/}"
            echo ""
          done
          
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "Workflow distribution to doc_workflow completed!"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"

      - name: Create and merge PR to main
        if: github.event.inputs.auto_merge != 'false'
        env:
          GITHUB_TOKEN: ${{ secrets.WORKFLOW_DISTRIBUTION_TOKEN }}
        run: |
          REPOS=(
            "ionutms/Minimal_ADP1032"
            "ionutms/Minimal_ADP1074"
          )
          
          echo ""
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "Creating PRs: doc_workflow → main"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          
          for repo in "${REPOS[@]}"; do
            echo ""
            echo "Repository: $repo"
            
            # Check if this repo had changes
            if ! grep -q "$repo" /tmp/changed_repos.txt; then
              echo "  ○ No changes to merge"
              continue
            fi
            
            # Create PR
            pr_response=$(curl -s -X POST \
              -H "Authorization: token ${GITHUB_TOKEN}" \
              -H "Accept: application/vnd.github.v3+json" \
              "https://api.github.com/repos/${repo}/pulls" \
              -d '{
                "title": "chore: update workflows from central repository",
                "head": "doc_workflow",
                "base": "main",
                "body": "Automated workflow sync from workflow-distributor"
              }')
            
            pr_number=$(echo "$pr_response" | jq -r '.number // empty')
            
            if [ -z "$pr_number" ]; then
              error_msg=$(echo "$pr_response" | jq -r '.message // "Unknown error"')
              echo "  ✗ Failed to create PR: $error_msg"
              
              # If PR already exists or no changes, try direct merge
              if [[ "$error_msg" == *"No commits"* ]] || [[ "$error_msg" == *"pull request already exists"* ]]; then
                echo "  → Attempting direct merge..."
                merge_response=$(curl -s -X POST \
                  -H "Authorization: token ${GITHUB_TOKEN}" \
                  -H "Accept: application/vnd.github.v3+json" \
                  "https://api.github.com/repos/${repo}/merges" \
                  -d '{
                    "base": "main",
                    "head": "doc_workflow",
                    "commit_message": "chore: sync workflows from doc_workflow"
                  }')
                
                if echo "$merge_response" | jq -e '.sha' > /dev/null 2>&1; then
                  echo "  ✓ Successfully merged doc_workflow → main"
                else
                  echo "  ○ Branches already in sync"
                fi
              fi
              continue
            fi
            
            echo "  ✓ PR #$pr_number created"
            
            # Merge the PR immediately
            echo "  → Merging PR..."
            merge_response=$(curl -s -X PUT \
              -H "Authorization: token ${GITHUB_TOKEN}" \
              -H "Accept: application/vnd.github.v3+json" \
              "https://api.github.com/repos/${repo}/pulls/${pr_number}/merge" \
              -d '{
                "merge_method": "merge"
              }')
            
            if echo "$merge_response" | jq -e '.merged' | grep -q true; then
              echo "  ✓ PR #$pr_number merged successfully"
            else
              error_msg=$(echo "$merge_response" | jq -r '.message // "Unknown error"')
              echo "  ✗ Failed to merge PR: $error_msg"
            fi
          done
          
          echo ""
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "PR merge completed!"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"