name: Distribute Workflows

on:
  push:
    branches:
      - distribute
  workflow_dispatch:

env:
  TARGET_REPOS: >-
    ionutms/Minimal_AD74416H
    ionutms/AD74416H_Power_Interface_Module
    ionutms/Modular_AD74416H_PLC
    ionutms/Minimal_ADP1074
    ionutms/Minimal_ADPL76030
    ionutms/Minimal_ADP1032
    ionutms/Minimal_MAX14906
    ionutms/Minimal_AD74413R
    ionutms/Modular_Software_Configurable_IO_PLC
    ionutms/Minimal_ADIN1110
    ionutms/Minimal_LTC9111
    ionutms/Minimal_MAX17761
    ionutms/Minimal_LT8304
    ionutms/Minimal_MAX32650
    ionutms/Minimal_ADP1031
    ionutms/Minimal_MAX17570

jobs:
  distribute:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout source repository
        uses: actions/checkout@v4

      - name: Setup Git
        run: |
          git config --global user.name "GitHub Actions Bot"
          git config --global user.email "actions@github.com"

      - name: Distribute workflows to main branch
        env:
          GITHUB_TOKEN: ${{ secrets.WORKFLOW_DISTRIBUTION_TOKEN }}
        run: |
          # Convert TARGET_REPOS to array
          REPOS=($TARGET_REPOS)
          
          # Target branch for workflow distribution
          TARGET_BRANCH="main"
          
          # Directory containing workflow templates
          WORKFLOW_DIR="workflows"
          
          # Check if workflows directory exists
          if [ ! -d "$WORKFLOW_DIR" ]; then
            echo "❌ Error: $WORKFLOW_DIR directory not found!"
            exit 1
          fi
          
          # Check if there are any workflow files
          if [ -z "$(ls -A $WORKFLOW_DIR 2>/dev/null)" ]; then
            echo "❌ Error: No files found in $WORKFLOW_DIR directory!"
            exit 1
          fi
          
          echo "Found workflows:"
          ls -la "$WORKFLOW_DIR"
          echo ""
          
          # Process each repository
          for repo in "${REPOS[@]}"; do
            echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
            echo "Processing repository: $repo"
            echo "Target branch: $TARGET_BRANCH"
            echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
            
            # Clone the target repository
            echo "→ Cloning repository..."
            if ! git clone --branch "$TARGET_BRANCH" --single-branch \
              "https://x-access-token:${GITHUB_TOKEN}@github.com/${repo}.git" \
              "temp-${repo##*/}" 2>&1; then
              echo "❌ Failed to clone $repo on branch $TARGET_BRANCH"
              echo "   Make sure the branch exists and you have access"
              continue
            fi
            
            cd "temp-${repo##*/}"
            
            # Create .github/workflows directory if it doesn't exist
            mkdir -p .github/workflows
            
            # Copy all workflow files
            echo "→ Copying workflow files..."
            if cp -v "../${WORKFLOW_DIR}"/* .github/workflows/ 2>&1; then
              echo "✓ Files copied successfully"
            else
              echo "❌ Failed to copy workflow files"
              cd ..
              rm -rf "temp-${repo##*/}"
              continue
            fi
            
            # Check if there are changes
            if [[ -n $(git status -s) ]]; then
              echo "→ Committing changes..."
              git add .github/workflows
              
              if git commit -m "chore: update workflows from central repository" 2>&1; then
                echo "✓ Commit created successfully"
              else
                echo "❌ Failed to create commit"
                cd ..
                rm -rf "temp-${repo##*/}"
                continue
              fi
              
              echo "→ Pushing to $TARGET_BRANCH..."
              if git push origin "$TARGET_BRANCH" 2>&1; then
                echo "✓ Successfully pushed workflows to $TARGET_BRANCH"
              else
                echo "❌ Failed to push to $TARGET_BRANCH"
              fi
            else
              echo "○ No changes needed in $TARGET_BRANCH"
            fi
            
            cd ..
            rm -rf "temp-${repo##*/}"
            echo ""
          done
          
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "Workflow distribution to main completed!"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"

      - name: Sync main to doc_workflow
        env:
          GITHUB_TOKEN: ${{ secrets.WORKFLOW_DISTRIBUTION_TOKEN }}
        run: |
          # Convert TARGET_REPOS to array
          REPOS=($TARGET_REPOS)
          
          echo ""
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "Syncing main → doc_workflow"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          
          for repo in "${REPOS[@]}"; do
            echo ""
            echo "Repository: $repo"
            
            # Check if doc_workflow branch exists
            doc_workflow_exists=$(curl -s -H "Authorization: token ${GITHUB_TOKEN}" \
              "https://api.github.com/repos/${repo}/git/ref/heads/doc_workflow" \
              | jq -r '.ref // empty')
            
            if [ -z "$doc_workflow_exists" ]; then
              echo "  ⚠ doc_workflow branch does not exist, skipping..."
              continue
            fi
            
            # Get the latest commit SHA from main
            main_sha=$(curl -s -H "Authorization: token ${GITHUB_TOKEN}" \
              "https://api.github.com/repos/${repo}/git/ref/heads/main" \
              | jq -r '.object.sha')
            
            if [ "$main_sha" = "null" ] || [ -z "$main_sha" ]; then
              echo "  ✗ Failed: Could not get main SHA"
              continue
            fi
            
            echo "  main SHA: ${main_sha:0:7}"
            
            # Try to merge main into doc_workflow
            merge_response=$(curl -s -X POST \
              -H "Authorization: token ${GITHUB_TOKEN}" \
              -H "Accept: application/vnd.github.v3+json" \
              "https://api.github.com/repos/${repo}/merges" \
              -d "{
                \"base\": \"doc_workflow\",
                \"head\": \"main\",
                \"commit_message\": \"chore: sync workflows from main\"
              }")
            
            if echo "$merge_response" | jq -e '.sha' > /dev/null 2>&1; then
              merge_sha=$(echo "$merge_response" | jq -r '.sha')
              echo "  ✓ Successfully merged main → doc_workflow"
              echo "  Merge commit: ${merge_sha:0:7}"
            else
              error_msg=$(echo "$merge_response" | jq -r '.message // "Unknown error"')
              
              # Check if already up to date
              if [[ "$error_msg" == *"Already up to date"* ]] || [[ "$error_msg" == *"already contains"* ]]; then
                echo "  ○ doc_workflow already up to date with main"
              # Check if there's a conflict
              elif [[ "$error_msg" == *"Merge conflict"* ]] || [[ "$error_msg" == *"conflict"* ]]; then
                echo "  ⚠ Merge conflict detected - using force update"
                echo "  → Forcing doc_workflow to match main..."
                
                # Force update doc_workflow to match main (this will overwrite conflicts)
                force_response=$(curl -s -X PATCH \
                  -H "Authorization: token ${GITHUB_TOKEN}" \
                  -H "Accept: application/vnd.github.v3+json" \
                  "https://api.github.com/repos/${repo}/git/refs/heads/doc_workflow" \
                  -d "{\"sha\": \"$main_sha\", \"force\": true}")
                
                if echo "$force_response" | jq -e '.object.sha' > /dev/null 2>&1; then
                  echo "  ✓ Force updated doc_workflow to match main"
                else
                  force_error=$(echo "$force_response" | jq -r '.message // "Unknown error"')
                  echo "  ✗ Failed to force update: $force_error"
                fi
              else
                echo "  ✗ Failed to merge: $error_msg"
              fi
            fi
          done
          
          echo ""
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "Sync to doc_workflow completed!"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"