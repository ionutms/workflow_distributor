name: Distribute Workflows

on:
  push:
    branches:
      - distribute
  workflow_dispatch:

env:
  TARGET_REPOS: >-
    ionutms/Minimal_AD74416H
    # ionutms/AD74416H_Power_Interface_Module
    # ionutms/Modular_AD74416H_PLC
    # ionutms/Minimal_ADP1074
    # ionutms/Minimal_ADPL76030
    # ionutms/Minimal_ADP1032
    # ionutms/Minimal_MAX14906
    # ionutms/Minimal_AD74413R
    # ionutms/Modular_Software_Configurable_IO_PLC
    # ionutms/Minimal_ADIN1110
    # ionutms/Minimal_LTC9111
    # ionutms/Minimal_MAX17761
    # ionutms/Minimal_LT8304
    # ionutms/Minimal_MAX32650
    # ionutms/Minimal_ADP1031
    # ionutms/Minimal_MAX17570

jobs:
  distribute:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout source repository
        uses: actions/checkout@v4

      - name: Setup Git
        run: |
          git config --global user.name "GitHub Actions Bot"
          git config --global user.email "actions@github.com"

      - name: Distribute workflows and sync branches
        env:
          GITHUB_TOKEN: ${{ secrets.WORKFLOW_DISTRIBUTION_TOKEN }}
        run: |
          # Convert TARGET_REPOS to array
          REPOS=($TARGET_REPOS)
          
          # Directory containing workflow templates
          WORKFLOW_DIR="workflows"
          
          # Check if workflows directory exists
          if [ ! -d "$WORKFLOW_DIR" ]; then
            echo "❌ Error: $WORKFLOW_DIR directory not found!"
            exit 1
          fi
          
          # Check if there are any workflow files
          if [ -z "$(ls -A $WORKFLOW_DIR 2>/dev/null)" ]; then
            echo "❌ Error: No files found in $WORKFLOW_DIR directory!"
            exit 1
          fi
          
          echo "Found workflows:"
          ls -la "$WORKFLOW_DIR"
          echo ""
          
          # Process each repository
          for repo in "${REPOS[@]}"; do
            echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
            echo "Processing repository: $repo"
            echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
            
            # Clone the target repository (fetch both main and doc_workflow)
            echo "→ Cloning repository..."
            if ! git clone "https://x-access-token:${GITHUB_TOKEN}@github.com/${repo}.git" "temp-${repo##*/}" 2>&1; then
              echo "❌ Failed to clone $repo"
              echo "   Make sure you have access"
              continue
            fi
            
            cd "temp-${repo##*/}"
            
            # Checkout main branch
            git checkout main
            
            # Create .github/workflows directory if it doesn't exist
            mkdir -p .github/workflows
            
            # Copy all workflow files
            echo "→ Copying workflow files to main..."
            if cp -v "../${WORKFLOW_DIR}"/* .github/workflows/ 2>&1; then
              echo "✓ Files copied successfully"
            else
              echo "❌ Failed to copy workflow files"
              cd ..
              rm -rf "temp-${repo##*/}"
              continue
            fi
            
            # Copy kicad-config.yml to .github directory only if it doesn't exist
            if [ ! -f ".github/kicad-config.yml" ]; then
              echo "→ Copying kicad-config.yml file..."
              if cp -v "../configs/kicad-config.yml" .github/ 2>&1; then
                echo "✓ kicad-config.yml copied successfully"
              else
                echo "○ kicad-config.yml not found in source, skipping..."
              fi
            else
              echo "○ kicad-config.yml already exists in target repository, skipping..."
            fi
            
            # Check if there are changes on main
            if [[ -n $(git status -s) ]]; then
              echo "→ Committing changes to main..."
              git add .github/workflows
              # Only add kicad-config.yml if we just copied it
              if [ -f ".github/kicad-config.yml" ]; then
                git add .github/kicad-config.yml
              fi
              
              if git commit -m "chore: update workflows and kicad config from central repository" 2>&1; then
                echo "✓ Commit created on main"
              else
                echo "❌ Failed to create commit"
                cd ..
                rm -rf "temp-${repo##*/}"
                continue
              fi
              
              echo "→ Pushing main..."
              if git push origin main 2>&1; then
                echo "✓ Successfully pushed to main"
              else
                echo "❌ Failed to push to main"
                cd ..
                rm -rf "temp-${repo##*/}"
                continue
              fi
            else
              echo "○ No changes needed on main"
            fi
            
            # Now handle doc_workflow branch
            echo ""
            echo "→ Switching to doc_workflow branch..."
            
            # Check if doc_workflow branch exists remotely
            if git ls-remote --heads origin doc_workflow | grep -q doc_workflow; then
              # Checkout existing doc_workflow branch
              if git checkout doc_workflow 2>&1; then
                echo "✓ Checked out doc_workflow branch"
                
                # Pull latest from main
                echo "→ Pulling changes from main..."
                if git pull origin main --no-edit 2>&1; then
                  echo "✓ Successfully pulled from main to doc_workflow"
                  
                  # Push updated doc_workflow
                  echo "→ Pushing doc_workflow..."
                  if git push origin doc_workflow 2>&1; then
                    echo "✓ Successfully pushed doc_workflow"
                  else
                    echo "❌ Failed to push doc_workflow"
                  fi
                else
                  echo "⚠ Pull from main had conflicts or failed"
                  echo "→ Attempting to reset doc_workflow to match main..."
                  
                  # Get main SHA
                  git checkout main
                  main_sha=$(git rev-parse HEAD)
                  
                  # Force doc_workflow to match main
                  git checkout doc_workflow
                  git reset --hard "$main_sha"
                  
                  if git push origin doc_workflow --force 2>&1; then
                    echo "✓ Force updated doc_workflow to match main"
                  else
                    echo "❌ Failed to force update doc_workflow"
                  fi
                fi
              else
                echo "❌ Failed to checkout doc_workflow"
              fi
            else
              echo "○ doc_workflow branch does not exist, skipping..."
            fi
            
            cd ..
            rm -rf "temp-${repo##*/}"
            echo ""
          done
          
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "Workflow distribution and sync completed!"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"